你可以使用以下代码示例来生成一个私人聊天机器人的框架：

```html
<!DOCTYPE html>
<html>
<head>
  <title>私人聊天机器人</title>
  <style>
    .chatbox {
      width: 300px;
      height: 400px;
      border: 1px solid #ccc;
      padding: 10px;
      overflow-y: scroll;
    }
    .user-message {
      color: blue;
    }
    .bot-message {
      color: green;
    }
    input[type="text"] {
      width: 100%;
      padding: 5px;
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <div id="chat" class="chatbox"></div>
  <input id="user-input" type="text" placeholder="输入消息" autofocus="true" />
  
  <script>
    // 创建聊天框架
    function createChatFrame() {
      const chatbox = document.getElementById('chat');
      const userInput = document.getElementById('user-input');
      userInput.addEventListener('keydown', handleUserInput);

      function handleUserInput(event) {
        if (event.key === 'Enter') {
          const userMessage = userInput.value;
          addMessage(userMessage, 'user-message');
          processUserInput(userMessage);
          userInput.value = '';
        }
      }

      function processUserInput(userMessage) {
        // 在这里处理用户输入并生成机器人回复
        // 例如，可以使用自然语言处理技术或硬编码规则
        // 将生成的机器人回复传递给 `addMessage()` 函数以在屏幕上显示
        const botMessage = generateBotReply(userMessage);
        addMessage(botMessage, 'bot-message');
      }

      function generateBotReply(userMessage) {
        // 在这里编写生成机器人回复的代码
        // 可以基于用户输入生成静态回复或调用后端API来获取动态回复
        // 这里只是一个示例，你可以根据你的需求来定制
        const staticReplies = {
          '你好': '你好！',
          '天气': '今天天气晴朗！',
          '再见': '再见，期待下次和你聊天！'
        };

        return staticReplies[userMessage] || '抱歉，我不明白你的意思';
      }

      function addMessage(message, className) {
        const messageElement = document.createElement('div');
        messageElement.textContent = message;
        messageElement.classList.add(className);
        chatbox.appendChild(messageElement);
        chatbox.scrollTop = chatbox.scrollHeight;
      }
    }

    createChatFrame();
  </script>
</body>
</html>
```

这段代码创建了一个简单的HTML页面，其中包含一个用于展示聊天内容的框和一个用于用户输入的输入框。当用户按下Enter键时，获取用户的消息并将其传递给 `processUserInput()` 函数。在 `processUserInput()` 函数中，你可以根据需要处理用户输入并生成机器人的回复。在这个例子中，我编写了一个简单的函数 `generateBotReply()` 来生成机器人的静态回复。

你可以根据自己的需求扩展这个框架，例如使用更高级的自然语言处理技术或调用后端API来获取动态回复。
